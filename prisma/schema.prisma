// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  books         Book[]    @relation("UserBooks")
  comments      Comment[]
  notifications Notification[]
  sentRequests  FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  friends       Friendship[]    @relation("UserFriends")
  friendOf      Friendship[]    @relation("FriendOf")
  lastEditedBooks Book[]        @relation("LastEditedBy")
  collaboratedBooks Book[]      @relation("BookCollaborators")

  @@unique([email])
  @@map("user")
}

model FriendRequest {
  id        String   @id @default(uuid())
  from      User     @relation("SentRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedRequests", fields: [toId], references: [id])
  toId      String
  status    String  
  createdAt DateTime @default(now())
}

model Friendship {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserFriends", fields: [userId], references: [id])
  friend    User     @relation("FriendOf", fields: [friendId], references: [id])
  friendId  String
  createdAt DateTime @default(now())
}

model Book {
  id            Int        @id @default(autoincrement())
  title         String
  author        String
  genre         String?    
  category      String?
  description   String?
  coverImage    String?    @default("https://example.com/default-cover.jpg")    
  privacy       String
  lastEditedBy  String?
  lastEditor    User?      @relation("LastEditedBy", fields: [lastEditedBy], references: [id])
  createdAt     DateTime   @default(now())
  publishedAt   DateTime?
  updatedAt     DateTime   @updatedAt
  status        String     @default("In Progress")
  wordCount     Int        @default(0)
  chapters      Chapter[]
  comments      Comment[]  @relation("BookComments")
  collaborators User[]     @relation("BookCollaborators")
  userId        String
  user          User       @relation("UserBooks", fields: [userId], references: [id])
}

model Chapter {
  id         Int        @id @default(autoincrement())
  title      String
  notes      String?
  content    String
  privacy    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  status     String     @default("In Progress")
  wordCount  Int        @default(0)
  book       Book       @relation(fields: [bookId], references: [id])
  bookId     Int
  comments   Comment[]
}
model Comment {
  id         Int        @id @default(autoincrement())
  content    String
  createdAt  DateTime   @default(now())
  chapter    Chapter    @relation(fields: [chapterId], references: [id])
  chapterId  Int
  book       Book?      @relation("BookComments", fields: [bookId], references: [id])
  bookId     Int?
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  parent     Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  parentId   Int?
  replies    Comment[]  @relation("CommentReplies")
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   
  data      Json
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
